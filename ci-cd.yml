name: CI/CD - VeiculoVerde ESGInteligentes

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_NAME: VeiculoVerde.Api
  TEST_PROJECT_PATH: VeiculoVerde.Tests/VeiculoVerde.Tests.csproj
  DOCKER_IMAGE_NAME: veiculoverde-api
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # ==================================================
  # 1. BUILD, TESTE E PUSH DA IMAGEM
  # ==================================================
  build_test_and_push:
    runs-on: ubuntu-latest

    steps:
    - name: 1. Checkout Código
      uses: actions/checkout@v4

    - name: 2. Configurar .NET Core 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 3. Restaurar dependências
      run: dotnet restore

    - name: 4. Build da Aplicação em Release
      run: dotnet build ${{ env.APP_NAME }}/${{ env.APP_NAME }}.csproj --no-restore --configuration Release

    - name: Rodar Testes Automatizados (MANDATÓRIO)
      run: dotnet test VeiculoVerde.Tests/VeiculoVerde.Tests.csproj --no-build --configuration Release


    - name: 6. Login no GitHub Container Registry (GHCR)
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 7. Build e Push da Imagem Docker
      if: github.event_name == 'push'
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        file: Dockerfile
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: 8. Definir saída da imagem
      if: github.event_name == 'push'
      id: set_output
      run: echo "image_full_tag=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    outputs:
      image_full_tag: ${{ steps.set_output.outputs.image_full_tag }}

  # ==================================================
  # 2. DEPLOY PARA STAGING (Continuous Delivery)
  # ==================================================
  deploy_staging:
    needs: build_test_and_push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: Staging

    steps:
    - name: 1. Geração do Comando de Deploy para Staging
      run: |
        echo "## 🚀 Deploy Staging Pronto"
        echo "---"
        echo "A Imagem Docker foi construída e está disponível no Container Registry."
        echo "Tag da Imagem: ${{ needs.build_test_and_push.outputs.image_full_tag }}"
        echo ""
        echo "### Comando Manual para Deploy (Simulação de Operação)"
        echo "\`\`\`bash"
        echo "docker login ghcr.io"
        echo "docker pull ${{ needs.build_test_and_push.outputs.image_full_tag }}"
        echo "docker tag ${{ needs.build_test_and_push.outputs.image_full_tag }} ${{ env.DOCKER_IMAGE_NAME }}:staging"
        echo "docker-compose -f docker-compose.staging.yml up -d --no-deps ${{ env.DOCKER_IMAGE_NAME }}"
        echo "\`\`\`"
        echo ""
        echo "::notice::Continuous Delivery para Staging concluído. Imagem: ${{ needs.build_test_and_push.outputs.image_full_tag }}"

  # ==================================================
  # 3. DEPLOY PARA PRODUCTION (Requer Aprovação Manual)
  # ==================================================
  deploy_production:
    needs: deploy_staging
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: Production  # ❗ Certifique-se de que este ambiente está criado no GitHub e tem aprovação manual ativada

    steps:
    - name: 1. Geração do Comando de Deploy para Production
      run: |
        echo "## 🔒 Deploy Production Pronto (Aprovação Manual Requerida)"
        echo "---"
        echo "Após a aprovação manual neste ambiente, a entrega para produção está documentada."
        echo "Tag da Imagem: ${{ needs.build_test_and_push.outputs.image_full_tag }}"
        echo ""
        echo "### Comando Manual para Deploy (Simulação de Operação)"
        echo "\`\`\`bash"
        echo "docker login ghcr.io"
        echo "docker pull ${{ needs.build_test_and_push.outputs.image_full_tag }}"
        echo "docker tag ${{ needs.build_test_and_push.outputs.image_full_tag }} ${{ env.DOCKER_IMAGE_NAME }}:production"
        echo "docker-compose -f docker-compose.prod.yml up -d --no-deps ${{ env.DOCKER_IMAGE_NAME }}"
        echo "\`\`\`"
        echo ""
        echo "::notice::Continuous Delivery para Production concluído. Imagem: ${{ needs.build_test_and_push.outputs.image_full_tag }}"
